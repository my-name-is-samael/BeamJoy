local t = require("tests/CommonTests")


-- stringify
t.test("JSON.stringifyRaw", function()
    t.expect(JSON.stringifyRaw({ a = true, b = false }), '{"a":true,"b":false}')
    t.expect(JSON.stringifyRaw({ int = 123, float = 45.67 }), '{"float":45.67,"int":123}')
    t.expect(JSON.stringifyRaw({ hello = "world", quote = 'He said "hi"' }),
        '{"hello":"world","quote":"He said \\"hi\\""}')
    t.expect(JSON.stringifyRaw({ value = nil }), '[]')
    t.expect(JSON.stringifyRaw({}), '[]')
    t.expect(JSON.stringifyRaw({ 1, nil, true, "text" }), '[1,null,true,"text"]')
    t.expect(JSON.stringifyRaw({ 1, [3] = true, [4] = "text" }), '[1,null,true,"text"]')
    t.expect(JSON.stringifyRaw({ { 1, 2 }, { 3, 4 } }), '[[1,2],[3,4]]')
    t.expect(JSON.stringifyRaw({ key = { nested = { num = 42 } } }), '{"key":{"nested":{"num":42}}}')
    t.expect(JSON.stringifyRaw({ empty = "" }), '{"empty":""}')
    t.expect(JSON.stringifyRaw({ 1, 2, 3 }), '[1,2,3]')
    t.expect(JSON.stringifyRaw({ 1, nil, 3 }), '[1,null,3]')
    t.expect(JSON.stringifyRaw({ a = { b = { c = "deep" } } }), '{"a":{"b":{"c":"deep"}}}')
    t.expect(JSON.stringifyRaw({ 1, { 2, { 3, { 4 } } } }), '[1,[2,[3,[4]]]]')
    t.expect(JSON.stringifyRaw({ mix = { 123, key = "val" } }), '{"mix":{"1":123,"key":"val"}}')
    t.expect(JSON.stringifyRaw({ neg = -42, sci = 1e6 }), '{"neg":-42,"sci":1000000.0}')
    t.expect(JSON.stringifyRaw({ escape = "\\ \n \t \" \b \f \r" }), '{"escape":"\\\\ \\n \\t \\" \\b \\f \\r"}')
    t.expect(JSON.stringifyRaw({ emptyTbl = {} }), '{"emptyTbl":[]}')
    t.expect(JSON.stringifyRaw({ a = { b = { c = nil } } }), '{"a":{"b":[]}}')
    t.expect(JSON.stringifyRaw({ [0] = 0, [1] = 1, [3] = 3 }), '{"0":0,"1":1,"3":3}')
end)

-- parse
t.test("JSON.parse", function()
    t.expect(JSON.parse('{"a":true,"b":false}'), { a = true, b = false })
    t.expect(JSON.parse('{"int":123,"float":45.67}'), { int = 123, float = 45.67 })
    t.expect(JSON.parse('{"hello":"world","quote":"He said \\"hi\\""}'), { hello = "world", quote = 'He said "hi"' })
    t.expect(JSON.parse('{"value":null}'), {})
    t.expect(JSON.parse('[]'), {})
    t.expect(JSON.parse('{}'), {})
    t.expect(JSON.parse('[null]'), {})
    t.expect(JSON.parse('[1,null,true,"text"]'), { 1, nil, true, "text" })
    t.expect(JSON.parse('{"1":1,"3":true,"4":"text"}'), { 1, nil, true, "text" })
    t.expect(JSON.parse('[[1,2],[3,4]]'), { { 1, 2 }, { 3, 4 } })
    t.expect(JSON.parse('{"1":{"1":1,"2":2},"2":{"1":3,"2":4}}'), { { 1, 2 }, { 3, 4 } })
    t.expect(JSON.parse('{"key":{"nested":{"num":42}}}'), { key = { nested = { num = 42 } } })
    t.expect(JSON.parse('[1,null,3,4]'), { 1, nil, 3, 4 })
    t.expect(JSON.parse('[1,null,3,4]'), { 1, [3] = 3, [4] = 4 })
    t.expect(JSON.parse('[1,null,3,4]'), { [1] = 1, [3] = 3, [4] = 4 })
    t.expect(JSON.parse('{"empty":""}'), { empty = "" })
    t.expect(JSON.parse('[1,2,3]'), { 1, 2, 3 })
    t.expect(JSON.parse('[1,null,3]'), { 1, nil, 3 })
    t.expect(JSON.parse('{"a":{"b":{"c":"deep"}}}'), { a = { b = { c = "deep" } } })
    t.expect(JSON.parse('[1,[2,[3,[4]]]]'), { 1, { 2, { 3, { 4 } } } })
    t.expect(JSON.parse('{"neg":-42,"sci":1000000}'), { neg = -42, sci = 1e6 })
    t.expect(JSON.parse('{"escape":"\\\\ \\n \\t \\" \\b \\f \\r"}'), { escape = "\\ \n \t \" \b \f \r" })
    t.expect(JSON.parse('{"emptyTbl":[]}'), { emptyTbl = {} })
    t.expect(JSON.parse('{"a":{"b":{"c":null}}}'), { a = { b = { c = nil } } })
    t.expect(JSON.parse('[true,false,null,"text",123]'), { true, false, nil, "text", 123 })
    t.expect(JSON.parse('{"nested":[{"id":1},{"id":2}]}'), { nested = { { id = 1 }, { id = 2 } } })
    t.expect(JSON.parse('[{"key":"val"},null,[1,2]]'), { { key = "val" }, nil, { 1, 2 } })
    t.expect(JSON.parse('{"mixed":[1,"a",null,true,false]}'), { mixed = { 1, "a", nil, true, false } })
    t.expect(JSON.parse('{"nulls":[null,null]}'), { nulls = { nil, nil } })
    t.expect(JSON.parse('{"0":0,"1":1,"3":3}'), { [0] = 0, [1] = 1, [3] = 3 })
end)
